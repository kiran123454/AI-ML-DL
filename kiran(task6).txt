                                             ********************** (FUCTIONS)**************************


# question # 1
#In the House Prices - Advanced Regression Techniques competition, you need to use information like the number of bedrooms and bathrooms to predict the price of a house. Inspired by this competition, you'll write your own function to do this.
#In the next code cell, create a function get_expected_cost() that has two arguments:
#beds - number of bedrooms
#baths - number of bathrooms
#It should return the expected cost of a house with that number of bedrooms and bathrooms. Assume that:
#the expected cost for a house with 0 bedrooms and 0 bathrooms is 80000.
#each bedroom adds 30000 to the expected cost
#each bathroom adds 10000 to the expected cost.
#For instance,
#a house with 1 bedroom and 1 bathroom has an expected cost of 120000, and
#a house with 2 bedrooms and 1 bathroom has an expected cost of 150000.


def get_expected_cost(beds, baths):
    base_price = 80000
    price_per_bedroom = 30000
    price_per_bathroom = 10000
    
    # Calculate total cost
    total_cost = base_price + (beds * price_per_bedroom) + (baths * price_per_bathroom)
    return total_cost

# Testing the function
print(get_expected_cost(1, 1))  # Expected output: 120000
print(get_expected_cost(2, 1))  # Expected output: 150000
print(get_expected_cost(3, 2))  # Expected output: 180000


120000
150000
190000

------------------------------------------------------------------------------------------------------------------------

# question # 2
#You are thinking about buying a home and want to get an idea of how much you will spend, based on the number of bedrooms and bathrooms. You are trying to decide between four different options:
#Option 1: house with two bedrooms and three bathrooms
#Option 2: house with three bedrooms and two bathrooms
#Option 3: house with three bedrooms and three bathrooms
#Option 4: house with three bedrooms and four bathrooms
#Use the get_expected_cost() function you defined in question 1 to set option_1, option_2, option_3, and option_4 to the expected cost of each option.

# Define the function to calculate the expected cost
def get_expected_cost(beds, baths):
    base_price = 50000  # Base price for a house
    price_per_bedroom = 30000  # Cost per bedroom
    price_per_bathroom = 15000  # Cost per bathroom
    
    # Calculate the total cost
    value = base_price + (beds * price_per_bedroom) + (baths * price_per_bathroom)
    return value

# Calculate expected costs for each option
option_1 = get_expected_cost(2, 3)
option_2 = get_expected_cost(3, 2)
option_3 = get_expected_cost(3, 3)
option_4 = get_expected_cost(3, 4)

# Print the expected costs
print("Option 1 cost:", option_1)
print("Option 2 cost:", option_2)
print("Option 3 cost:", option_3)
print("Option 4 cost:", option_4)


Option 1 cost: 155000
Option 2 cost: 170000
Option 3 cost: 185000
Option 4 cost: 200000

--------------------------------------------------------------------------------------------------------------------------------------------------------

# question # 3
#You're a home decorator, and you'd like to use Python to streamline some of your work. Specifically, you're creating a tool that you intend to use to calculate the cost of painting a room.
#As a first step, define a function get_cost() that takes as input:
#sqft_walls = total square feet of walls to be painted
#sqft_ceiling = square feet of ceiling to be painted
#sqft_per_gallon = number of square feet that you can cover with one gallon of paint
#cost_per_gallon = cost (in dollars) of one gallon of paint
#It should return the cost (in dollars) of putting one coat of paint on all walls and the ceiling. Assume you can buy the exact amount of paint that you need, so you can buy partial gallons (e.g., if you need 7.523 gallons, you can buy that exact amount, instead of needing to buy 8 gallons and waste some paint).
#Do not round your answer.

def get_cost(sqft_walls, sqft_ceiling, sqft_per_gallon, cost_per_gallon):
    # Calculate total square footage to be painted
    total_sqft = sqft_walls + sqft_ceiling
    
    # Calculate the exact gallons of paint needed
    gallons_needed = total_sqft / sqft_per_gallon
    
    # Calculate total cost
    total_cost = gallons_needed * cost_per_gallon
    
    return total_cost

# Example usage:
print(get_cost(800, 200, 400, 25))  # Expected output: 62.5


62.5
--------------------------------------------------------------------------------------------------------------------------------------------------------

# question # 4
#Use the get_cost() function you defined in Question 3 to calculate the cost of applying one coat of paint to a room with:

#432 square feet of walls, and
#144 square feet of ceiling.
#Assume that one gallon of paint covers 400 square feet and costs $15. As in Question 3, assume you can buy partial gallons of paint.
#Do not round your answer.

# Define the function
def get_cost(sqft_walls, sqft_ceiling, sqft_per_gallon, cost_per_gallon):
    total_sqft = sqft_walls + sqft_ceiling  # Total area to be painted
    gallons_needed = total_sqft / sqft_per_gallon  # Exact gallons needed
    total_cost = gallons_needed * cost_per_gallon  # Total cost calculation
    return total_cost

# Given values
sqft_walls = 432
sqft_ceiling = 144
sqft_per_gallon = 400
cost_per_gallon = 15

# Calculate cost
painting_cost = get_cost(sqft_walls, sqft_ceiling, sqft_per_gallon, cost_per_gallon)

# Print the result
print(painting_cost)  # Expected output: 21.6


21.599999999999998

---------------------------------------------------------------------------------------------------------------------------------------------------

# question # 5:
#Now say you can no longer buy fractions of a gallon. (For instance, if you need 4.3 gallons to do a project, then you have to buy 5 gallons of paint.)

#With this new scenario, you will create a new function get_actual_cost that uses the same inputs and calculates the cost of your project.

#One function that you'll need to use to do this is math.ceil(). We demonstrate usage of this function in the code cell below. It takes as a number as input and rounds the number up to the nearest integer.

#Run the next code cell to test this function for yourself. Feel free to change the value of test_value and make sure math.ceil() returns the number you expect.

import math  # Importing math module to use math.ceil()

# Define the function
def get_actual_cost(sqft_walls, sqft_ceiling, sqft_per_gallon, cost_per_gallon):
    total_sqft = sqft_walls + sqft_ceiling  # Total area to be painted
    gallons_needed = total_sqft / sqft_per_gallon  # Exact gallons required
    rounded_gallons = math.ceil(gallons_needed)  # Round up to the nearest whole gallon
    total_cost = rounded_gallons * cost_per_gallon  # Total cost calculation
    return total_cost

# Given values
sqft_walls = 432
sqft_ceiling = 144
sqft_per_gallon = 400
cost_per_gallon = 15

# Calculate actual cost
actual_painting_cost = get_actual_cost(sqft_walls, sqft_ceiling, sqft_per_gallon, cost_per_gallon)

# Print the result
print(actual_painting_cost)  # Expected output: 30


30
------------------------------------------------------------------------------------------------------------------------------------------------------------




                                              ********************** (DATA TYPES)**************************

#question # 1:
#You have seen how to convert a float to an integer with the int function. Try this out yourself by running the code cell below.
test_value = 7.9
converted_value = int(test_value)

# Print the result
print(converted_value)  

output: 7

-------------------------------------------------------------------------

# question # 2:
#What happens when you multiply an integer or float by True? What happens when you multiply them by False? How does the answer change if the numbers are positive or negative?
#What happens when you multiply a string by True? By False?
#Use the next code cell for your investigation.
print(5 * True)   # Expected output: 5 (True acts as 1)
print(-3 * True)  # Expected output: -3
print(5 * False)  # Expected output: 0 (False acts as 0)
print(-3 * False) # Expected output: 0

# Multiplying a float by True and False
print(4.5 * True)   # Expected output: 4.5
print(-2.7 * True)  # Expected output: -2.7
print(4.5 * False)  # Expected output: 0.0
print(-2.7 * False) # Expected output: 0.0

# Multiplying a string by True and False
print("Hello" * True)   # Expected output: "Hello" (True acts as 1)
print("Hello" * False)  # Expected output: "" (empty string)

# Checking behavior with different data types
print(True * True)   # Expected output: 1
print(False * False) # Expected output: 0
print(True * False)  # Expected output: 0


5
-3
0
0
4.5
-2.7
0.0
-0.0
Hello

1
0
0

------------------------------------------------------------------------------


#question # 3
#In this question, you will build off your work from the previous exercise to write a function that estimates the value of a house.
#Use the next code cell to create a function get_expected_cost that takes as input three variables:
#beds - number of bedrooms (data type float)
#baths - number of bathrooms (data type float) has_basement - whether or not the house has a basement (data type boolean)It should return the expected cost of a house with those characteristics. Assume that: the expected cost for a house with 0 bedrooms and 0 bathrooms, and no basement is 80000,
#each bedroom adds 30000 to the expected cost,
#each bathroom adds 10000 to the expected cost, and a basement adds 40000 to the expected cost.For instance,
#a house with 1 bedroom, 1 bathroom, and no basement has an expected cost of 80000 + 30000 + 10000 = 120000. This value will be calculated with get_expected_cost(1, 1, False).
#a house with 2 bedrooms, 1 bathroom, and a basement has an expected cost of 80000 + 2*30000 + 10000 + 40000 = 190000. This value will be calculated with get_expected_cost(2, 1, True).
#Remember you can always get a hint by uncommenting q3.hint() in the code cell following the next!

def get_expected_cost(beds, baths, has_basement):
    # Base cost of the house
    cost = 80000  
    
    # Adding cost for bedrooms and bathrooms
    cost += beds * 30000  
    cost += baths * 10000  
    
    # Adding cost if the house has a basement
    if has_basement:
        cost += 40000  
    
    return cost

# Example cases
print(get_expected_cost(1, 1, False))  # Expected output: 120000
print(get_expected_cost(2, 1, True))   # Expected output: 190000


120000
190000

------------------------------------------------------------------------------------------------

# quetion # 4:
#We'll continue our study of boolean arithmetic. For this question, your task is to provide a description of what happpens when you add booleans.

#Use the next code cell for your investigation. Feel free to add or remove any lines of code - use it as your workspace!

print(True + True)     # Expected output: 2 (1 + 1)
print(True + False)    # Expected output: 1 (1 + 0)
print(False + False)   # Expected output: 0 (0 + 0)

# Adding booleans to integers
print(True + 5)        # Expected output: 6 (1 + 5)
print(False + 10)      # Expected output: 10 (0 + 10)

# Adding booleans to floats
print(True + 4.5)      # Expected output: 5.5 (1 + 4.5)
print(False + 7.8)     # Expected output: 7.8 (0 + 7.8)

# Adding booleans to strings (will cause an error)
try:
    print(True + "Hello")  # TypeError: unsupported operand
except TypeError as e:
    print(f"Error: {e}")

# Adding booleans in a list sum
bool_list = [True, True, False, True]
print(sum(bool_list))  # Expected output: 3 (1+1+0+1)


2
1
0
6
10
5.5
7.8
Error: unsupported operand type(s) for +: 'bool' and 'str'
3

----------------------------------------------------------------------------------------

# question #5:
#You own an online shop where you sell rings with custom engravings. You offer both gold plated and solid gold rings.

#Gold plated rings have a base cost of $50, and you charge $7 per engraved unit.
#Solid gold rings have a base cost of $100, and you charge $10 per engraved unit.
#Spaces and punctuation are counted as engraved units.
#Write a function cost_of_project() that takes two arguments:

#engraving - a Python string with the text of the engraving
#solid_gold - a Boolean that indicates whether the ring is solid gold
#It should return the cost of the project. This question should be fairly challenging, and you may need a hint.

def cost_of_project(engraving, solid_gold):
    # Determine base cost based on material
    base_cost = 100 if solid_gold else 50  
    
    # Determine engraving cost per unit
    engraving_cost_per_unit = 10 if solid_gold else 7  
    
    # Calculate the total engraving cost
    engraving_cost = len(engraving) * engraving_cost_per_unit  
    
    # Calculate the total project cost
    total_cost = base_cost + engraving_cost  
    
    return total_cost  

# Example test cases
print(cost_of_project("Love You!", True))   # Solid gold ring
print(cost_of_project("Forever", False))    # Gold plated ring


190
99



