#Question 1: 
User Data Collector
#Prompt the user for name, age, email, and favorite number.
#Store in a dictionary.
#Validate email format (@ and . must be present).
#Display formatted output.

import re
def collect_user_data():
    user_data = {}
    user_data['name'] = input("Enter your name: ")
    user_data['age'] = input("Enter your age: ")
    user_data['email'] = input("Enter your email: ")
    user_data['favorite_number'] = input("Enter your favorite number: ")
    
    # Validate age is a number
    if not user_data['age'].isdigit():
        print("Invalid age. Please enter a number.")
        return
    
    # Validate favorite number is a number
    if not user_data['favorite_number'].isdigit():
        print("Invalid favorite number. Please enter a number.")
        return
    
    # Convert age and favorite number to integer
    user_data['age'] = int(user_data['age'])
    user_data['favorite_number'] = int(user_data['favorite_number'])

    # Validate email using corrected regex
    email_pattern = r"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$"
    if not re.match(email_pattern, user_data['email']):
        print("Invalid email format. Please try again.")
        return
    
    # Display collected data
    print("\nUser Data Collected:")
    for key, value in user_data.items():
        print(f"{key.capitalize()}: {value}")

# Run the function
collect_user_data()


Enter your name: kiran riaz
Enter your age: 20
Enter your email: kiran.riaz@gmail.com
Enter your favorite number: 2

User Data Collected:
Name: kiran riaz
Age: 20
Email: kiran.riaz@gmail.com
Favorite_number: 2


--------------------------------------------------------------------------------------------------------

#Question 2: 
Even or Odd?
#Create is_even(number) function.
#Use % operator to check even or odd.
#Print the result.

def is_even(number):
    if number % 2 == 0:
        print(f"{number} is Even.")
    else:
        print(f"{number} is Odd.")

# Example Usage
num = int(input("Enter a number: "))
is_even(num)


Enter a number: 44
44 is Even.

--------------------------------------------------------------------------------------------------------

#Question 3: 
Temperature Converter
#Create convert_temperature(temp, scale) function.
#Convert between Celsius and Fahrenheit.
#Use if conditions to determine conversion direction.
#Display converted temperature.

def convert_temperature(temp, scale):
    if scale.upper() == "C":
        converted = (temp * 9/5) + 32
        print(f"{temp}°C is equal to {converted:.2f}°F")
    elif scale.upper() == "F":
        converted = (temp - 32) * 5/9
        print(f"{temp}°F is equal to {converted:.2f}°C")
    else:
        print("Invalid scale! Please enter 'C' for Celsius or 'F' for Fahrenheit.")

# Example Usage
temperature = float(input("Enter temperature: "))
scale = input("Convert to (C/F): ")
convert_temperature(temperature, scale)


Enter temperature: 345
Convert to (C/F): c
345.0°C is equal to 653.00°F

--------------------------------------------------------------------------------------------------------

#Question 4: 
Finding Min & Max
#Create find_max_min(numbers_list) function.
#Prompt user for 5 numbers and store in a list.
#Use max() and min() to find values.
#Return min and max.

def find_max_min(numbers_list):
    return min(numbers_list), max(numbers_list)

# Prompt user for 5 numbers
numbers = []
for i in range(5):
    num = float(input(f"Enter number {i+1}: "))
    numbers.append(num)

# Display the entered list
print(f"\nNumbers entered: {numbers}")

# Get min and max values
minimum, maximum = find_max_min(numbers)

# Display results
print(f"Minimum value: {minimum}")
print(f"Maximum value: {maximum}")



Enter number 1: 345
Enter number 2: 785
Enter number 3: 239
Enter number 4: 763
Enter number 5: 920

Numbers entered: [345.0, 785.0, 239.0, 763.0, 920.0]
Minimum value: 239.0
Maximum value: 920.0

--------------------------------------------------------------------------------------------------------

#Question 5: 
Student Data Manager
#Prompt user for details of 3 students.
#Store each student as a tuple in a list.
#Convert list to dictionary where:
#Key → Student name.
#Value → Tuple of (age, grade).
#Display dictionary.

def student_data_manager():
    students_list = []

    # Collect data for 3 students
    for i in range(3):
        print(f"\nEnter details for Student {i+1}:")
        name = input("Name: ")
        age = input("Age: ")
        grade = input("Grade: ")

        # Store data as a tuple
        students_list.append((name, age, grade))

    # Convert list to dictionary
    students_dict = {name: (age, grade) for name, age, grade in students_list}

    # Display the dictionary
    print("\nStudent Data:")
    for name, details in students_dict.items():
        print(f"{name}: Age {details[0]}, Grade {details[1]}")

# Run the function
student_data_manager()



Enter details for Student 1:
Name: kiran riaz
Age: 20
Grade: A+

Enter details for Student 2:
Name: ilsa riaz
Age: 19
Grade: A

Enter details for Student 3:
Name: ibraheem riaz
Age: 10
Grade: B

Student Data:
kiran riaz: Age 20, Grade A+
ilsa riaz: Age 19, Grade A
ibraheem riaz: Age 10, Grade B

--------------------------------------------------------------------------------------------------------

#Question 6: 
Inventory Management System
#Create update_inventory(inventory_dict, item, quantity) function.
#Ensure quantity doesn't drop below zero.
#Initialize an inventory with 5 items.
#Prompt user to update 3 items.
#Display updated inventory.

def update_inventory(inventory_dict, item, quantity):
    """Updates the inventory by adding or removing quantities while preventing negative values."""
    item = item.title()  # Convert user input to title case
    if item in inventory_dict:
        inventory_dict[item] = max(0, inventory_dict[item] + quantity)
    else:
        print(f"Item '{item}' not found in inventory.")

# Initialize inventory with 5 items
inventory = {
    "Apples": 10,
    "Bananas": 15,
    "Oranges": 8,
    "Milk": 5,
    "Bread": 12
}

# Display initial inventory
print("\nInitial Inventory:")
for item, qty in inventory.items():
    print(f"{item}: {qty}")

# Allow user to update inventory for 3 items
for i in range(3):
    print(f"\nUpdate {i+1}:")
    item_name = input("Enter item name: ").strip().title()  # Convert input to title case and remove extra spaces
    quantity_change = int(input("Enter quantity to add/remove (use negative numbers to remove): "))
    update_inventory(inventory, item_name, quantity_change)

# Display updated inventory
print("\nUpdated Inventory:")
for item, qty in inventory.items():
    print(f"{item}: {qty}")



Initial Inventory:
Apples: 10
Bananas: 15
Oranges: 8
Milk: 5
Bread: 12

Update 1:
Enter item name: bread
Enter quantity to add/remove (use negative numbers to remove): 3

Update 2:
Enter item name: apples
Enter quantity to add/remove (use negative numbers to remove): 4

Update 3:
Enter item name: milk
Enter quantity to add/remove (use negative numbers to remove): 5

Updated Inventory:
Apples: 14
Bananas: 15
Oranges: 8
Milk: 10
Bread: 15